// Generated by CoffeeScript 1.6.3
/*
  backbone-rest.js 0.0.1
  Copyright (c) 2013 Vidigami - https://github.com/vidigami/backbone-rest
  License: MIT (http://www.opensource.org/licenses/mit-license.php)
*/


(function() {
  var Backbone, JSONUtils, JoinTableControllerSingleton, ORMUtils, RESTController, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  _ = require('underscore');

  Backbone = require('backbone');

  ORMUtils = require('backbone-orm/lib/utils');

  JSONUtils = require('backbone-orm/lib/json_utils');

  JoinTableControllerSingleton = require('./join_table_controller_singleton');

  module.exports = RESTController = (function() {
    function RESTController(app, options) {
      var key, value;
      if (options == null) {
        options = {};
      }
      this._call = __bind(this._call, this);
      this.headByQuery = __bind(this.headByQuery, this);
      this.head = __bind(this.head, this);
      this.destroyByQuery = __bind(this.destroyByQuery, this);
      this.destroy = __bind(this.destroy, this);
      this.update = __bind(this.update, this);
      this.create = __bind(this.create, this);
      this.show = __bind(this.show, this);
      this.index = __bind(this.index, this);
      for (key in options) {
        value = options[key];
        this[key] = value;
      }
      this.white_lists || (this.white_lists = {});
      this.templates || (this.templates = {});
      this.logger || (this.logger = console);
      if (this.route_prefix) {
        this.route = "" + this.route_prefix + this.route;
      }
      app.get("" + this.route + "/:id", this._call(this.show));
      app.get(this.route, this._call(this.index));
      app.post(this.route, this._call(this.create));
      app.put("" + this.route + "/:id", this._call(this.update));
      app.del("" + this.route + "/:id", this._call(this.destroy));
      app.del(this.route, this._call(this.destroyByQuery));
      app.head("" + this.route + "/:id", this._call(this.head));
      app.head(this.route, this._call(this.headByQuery));
      JoinTableControllerSingleton.generateByOptions(app, options);
    }

    RESTController.prototype.sendError = function(res, err) {
      var req;
      console.trace("Hello");
      req = res.req;
      this.constructor.trigger('error', {
        req: req,
        res: res,
        err: err
      });
      this.logger.error("Error 500 from " + req.method + " " + req.url + ": " + err);
      return res.header('content-type', 'text/plain').status(500).send(err.toString());
    };

    RESTController.prototype.index = function(req, res) {
      var cursor, err, event_data,
        _this = this;
      try {
        event_data = {
          req: res,
          res: res
        };
        this.constructor.trigger('pre:index', event_data);
        cursor = this.model_type.cursor(JSONUtils.parse(req.query));
        if (this.white_lists.index) {
          cursor = cursor.whiteList(this.white_lists.index);
        }
        return cursor.toJSON(function(err, json) {
          if (err) {
            return _this.sendError(res, err);
          }
          _this.constructor.trigger('post:show', _.extend(event_data, {
            json: json
          }));
          if (cursor.hasCursorQuery('$count') || cursor.hasCursorQuery('$exists')) {
            return res.json({
              result: json
            });
          }
          if (!json) {
            if (cursor.hasCursorQuery('$one')) {
              return res.status(404).send();
            } else {
              return res.json(json);
            }
          }
          if (cursor.hasCursorQuery('$page')) {
            return _this.render(req, json.rows, function(err, rendered_json) {
              if (err) {
                return _this.sendError(res, err);
              }
              json.rows = rendered_json;
              return res.json(json);
            });
          } else {
            return _this.render(req, json, function(err, rendered_json) {
              if (err) {
                return _this.sendError(res, err);
              }
              return res.json(rendered_json);
            });
          }
        });
      } catch (_error) {
        err = _error;
        return this.sendError(res, err);
      }
    };

    RESTController.prototype.show = function(req, res) {
      var cursor, err, event_data,
        _this = this;
      try {
        event_data = {
          req: res,
          res: res
        };
        this.constructor.trigger('pre:show', event_data);
        cursor = this.model_type.cursor(req.params.id);
        if (this.white_lists.show) {
          cursor = cursor.whiteList(this.white_lists.show);
        }
        return cursor.toJSON(function(err, json) {
          if (err) {
            return _this.sendError(res, err);
          }
          if (!json) {
            return res.status(404).send();
          }
          if (_this.white_lists.show) {
            json = _.pick(json, _this.white_lists.show);
          }
          _this.constructor.trigger('post:show', _.extend(event_data, {
            json: json
          }));
          return _this.render(req, json, function(err, json) {
            if (err) {
              return _this.sendError(res, err);
            }
            return res.json(json);
          });
        });
      } catch (_error) {
        err = _error;
        return this.sendError(res, err);
      }
    };

    RESTController.prototype.create = function(req, res) {
      var err, event_data, json, model,
        _this = this;
      try {
        json = JSONUtils.parse(this.white_lists.create ? _.pick(req.body, this.white_lists.create) : req.body);
        model = new this.model_type(this.model_type.prototype.parse(json));
        event_data = {
          req: res,
          res: res,
          model: model
        };
        this.constructor.trigger('pre:create', event_data);
        return model.save(function(err) {
          if (err) {
            return _this.sendError(res, err);
          }
          event_data.model = model;
          json = _this.white_lists.create ? _.pick(model.toJSON(), _this.white_lists.create) : model.toJSON();
          return _this.render(req, json, function(err, json) {
            if (err) {
              return _this.sendError(res, err);
            }
            _this.constructor.trigger('post:create', _.extend(event_data, {
              json: json
            }));
            return res.json(json);
          });
        });
      } catch (_error) {
        err = _error;
        return this.sendError(res, err);
      }
    };

    RESTController.prototype.update = function(req, res) {
      var err, json,
        _this = this;
      try {
        json = JSONUtils.parse(this.white_lists.update ? _.pick(req.body, this.white_lists.update) : req.body);
        return this.model_type.find(req.params.id, function(err, model) {
          var event_data;
          if (err) {
            return _this.sendError(res, err);
          }
          if (!model) {
            return res.status(404).send();
          }
          event_data = {
            req: res,
            res: res,
            model: model
          };
          _this.constructor.trigger('pre:update', event_data);
          return model.save(model.parse(json), function(err) {
            if (err) {
              return _this.sendError(res, err);
            }
            event_data.model = model;
            json = _this.white_lists.update ? _.pick(model.toJSON(), _this.white_lists.update) : model.toJSON();
            return _this.render(req, json, function(err, json) {
              if (err) {
                return _this.sendError(res, err);
              }
              _this.constructor.trigger('post:update', _.extend(event_data, {
                json: json
              }));
              return res.json(json);
            });
          });
        });
      } catch (_error) {
        err = _error;
        return this.sendError(res, err);
      }
    };

    RESTController.prototype.destroy = function(req, res) {
      var err, event_data,
        _this = this;
      try {
        event_data = {
          req: res,
          res: res
        };
        this.constructor.trigger('pre:destroy', event_data);
        return this.model_type.exists(req.params.id, function(err, exists) {
          if (err) {
            return _this.sendError(res, err);
          }
          if (!exists) {
            return res.status(404).send();
          }
          return _this.model_type.destroy({
            id: req.params.id
          }, function(err) {
            if (err) {
              return _this.sendError(res, err);
            }
            _this.constructor.trigger('post:destroy', event_data);
            return res.status(200).send();
          });
        });
      } catch (_error) {
        err = _error;
        return this.sendError(res, err);
      }
    };

    RESTController.prototype.destroyByQuery = function(req, res) {
      var err, event_data,
        _this = this;
      try {
        event_data = {
          req: res,
          res: res
        };
        this.constructor.trigger('pre:destroyByQuery', event_data);
        return this.model_type.destroy(JSONUtils.parse(req.query), function(err) {
          if (err) {
            return _this.sendError(res, err);
          }
          _this.constructor.trigger('post:destroyByQuery', event_data);
          return res.send(200);
        });
      } catch (_error) {
        err = _error;
        return this.sendError(res, err);
      }
    };

    RESTController.prototype.head = function(req, res) {
      var err,
        _this = this;
      try {
        return this.model_type.exists(req.params.id, function(err, exists) {
          if (err) {
            return _this.sendError(res, err);
          }
          return res.send(exists ? 200 : 404);
        });
      } catch (_error) {
        err = _error;
        return this.sendError(res, err);
      }
    };

    RESTController.prototype.headByQuery = function(req, res) {
      var err,
        _this = this;
      try {
        return this.model_type.exists(JSONUtils.parse(req.query), function(err, exists) {
          if (err) {
            return _this.sendError(res, err);
          }
          return res.send(exists ? 200 : 404);
        });
      } catch (_error) {
        err = _error;
        return this.sendError(res, err);
      }
    };

    RESTController.prototype.render = function(req, json, callback) {
      var models, options, template, template_name,
        _this = this;
      template_name = req.query.$render || req.query.$template || this.default_template;
      if (!template_name) {
        return callback(null, json);
      }
      if (!(template = this.templates[template_name])) {
        return callback(new Error("Unrecognized template: " + template_name));
      }
      options = (this.renderOptions ? this.renderOptions(req, template_name) : {});
      models = _.isArray(json) ? _.map(json, function(model_json) {
        return new _this.model_type(_this.model_type.prototype.parse(model_json));
      }) : new this.model_type(this.model_type.prototype.parse(json));
      return JSONUtils.renderTemplate(models, template, options, callback);
    };

    RESTController.prototype.setHeaders = function(req, res, next) {
      res.header('cache-control', 'no-cache');
      return next();
    };

    RESTController.prototype._call = function(fn) {
      var auths;
      auths = _.isArray(this.auth) ? this.auth.slice() : this.auth ? [this.auth] : [];
      auths.push(this.setHeaders);
      auths.push(fn);
      return auths;
    };

    return RESTController;

  })();

  _.extend(RESTController, Backbone.Events);

}).call(this);
