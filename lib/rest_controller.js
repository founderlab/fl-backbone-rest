// Generated by CoffeeScript 1.11.0

/*
  backbone-rest.js 0.5.3
  Copyright (c) 2013 Vidigami - https://github.com/vidigami/backbone-rest
  License: MIT (http://www.opensource.org/licenses/mit-license.php)
 */

(function() {
  var Backbone, JSONUtils, JoinTableControllerSingleton, Queue, RESTController, Utils, _, path, ref,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  path = require('path');

  ref = require('backbone-orm'), _ = ref._, Backbone = ref.Backbone, Utils = ref.Utils, JSONUtils = ref.JSONUtils;

  Queue = require('queue-async');

  JoinTableControllerSingleton = require('./lib/join_table_controller_singleton');

  module.exports = RESTController = (function(superClass) {
    extend(RESTController, superClass);

    RESTController.METHODS = ['show', 'index', 'create', 'update', 'destroy', 'destroyByQuery', 'head', 'headByQuery'];

    function RESTController(app, options) {
      var base, del, schema, schemaKeys;
      if (options == null) {
        options = {};
      }
      this.stripRev = bind(this.stripRev, this);
      this.parseSearchQuery = bind(this.parseSearchQuery, this);
      this.render = bind(this.render, this);
      this.fetchJSON = bind(this.fetchJSON, this);
      this.fetchShowJSON = bind(this.fetchShowJSON, this);
      this.fetchIndexJSON = bind(this.fetchIndexJSON, this);
      this.clearCache = bind(this.clearCache, this);
      this.headByQuery = bind(this.headByQuery, this);
      this.head = bind(this.head, this);
      this.destroyByQuery = bind(this.destroyByQuery, this);
      this.destroy = bind(this.destroy, this);
      this.update = bind(this.update, this);
      this.create = bind(this.create, this);
      this.show = bind(this.show, this);
      this.index = bind(this.index, this);
      this.requestId = bind(this.requestId, this);
      RESTController.__super__.constructor.call(this, app, _.defaults({
        headers: RESTController.headers
      }, options));
      this.whitelist || (this.whitelist = {});
      this.templates || (this.templates = {});
      if (this.route_prefix) {
        this.route = path.join(this.route_prefix, this.route);
      }
      app.get(this.route, this.wrap(this.index));
      app.get(this.route + "/:id", this.wrap(this.show));
      app.post(this.route, this.wrap(this.create));
      app.put(this.route + "/:id", this.wrap(this.update));
      del = app.hasOwnProperty('delete') ? 'delete' : 'del';
      app[del](this.route + "/:id", this.wrap(this.destroy));
      app[del](this.route, this.wrap(this.destroyByQuery));
      app.head(this.route + "/:id", this.wrap(this.head));
      app.head(this.route, this.wrap(this.headByQuery));
      this.db = (_.result(new this.model_type, 'url') || '').split(':')[0];
      if (_.isUndefined(this.templates.show)) {
        schema = this.model_type.prototype.sync('sync').schema;
        schemaKeys = _.keys(schema.type_overrides).concat(_.keys(schema.fields));
        this.templates.show = {
          $select: schemaKeys
        };
      }
      if (_.isUndefined(this.templates.show)) {
        this.default_template = 'show';
      }
      if (this.cache) {
        (base = this.cache).hash || (base.hash = this.route);
      }
      JoinTableControllerSingleton.generateByOptions(app, options);
    }

    RESTController.prototype.requestId = function(req) {
      return JSONUtils.parseField(req.params.id, this.model_type, 'id');
    };

    RESTController.prototype.index = function(req, res) {
      var cache, done, key, ref1;
      if (req.method === 'HEAD') {
        return this.headByQuery.apply(this, arguments);
      }
      done = (function(_this) {
        return function(err, result) {
          var json, status;
          json = result.json, status = result.status;
          if (err) {
            return _this.sendError(res, err);
          }
          if (status) {
            return _this.sendStatus(res, status);
          }
          return res.json(json);
        };
      })(this);
      if ((cache = (ref1 = this.cache) != null ? ref1.cache : void 0)) {
        key = this.cache.hash + "|show_" + (JSON.stringify(req.query));
        return cache.wrap(key, ((function(_this) {
          return function(callback) {
            return _this.fetchIndexJSON(req, callback);
          };
        })(this)), this.cache, done);
      } else {
        return this.fetchIndexJSON(req, done);
      }
    };

    RESTController.prototype.show = function(req, res) {
      var cache, done, key, ref1;
      done = (function(_this) {
        return function(err, result) {
          var json, status;
          json = result.json, status = result.status;
          if (err) {
            return _this.sendError(res, err);
          }
          if (status) {
            return _this.sendStatus(res, status);
          }
          return res.json(json);
        };
      })(this);
      req.query.id = this.requestId(req);
      req.query.$one = true;
      if ((cache = (ref1 = this.cache) != null ? ref1.cache : void 0)) {
        key = this.cache.hash + "|index_" + (JSON.stringify(req.query));
        return cache.wrap(key, ((function(_this) {
          return function(callback) {
            return _this.fetchShowJSON(req, callback);
          };
        })(this)), this.cache, done);
      } else {
        return this.fetchShowJSON(req, done);
      }
    };

    RESTController.prototype.create = function(req, res) {
      var event_data, json, model;
      json = JSONUtils.parseDates(this.whitelist.create ? _.pick(req.body, this.whitelist.create) : req.body);
      model = new this.model_type(this.model_type.prototype.parse(json));
      event_data = {
        req: req,
        res: res,
        model: model
      };
      this.constructor.trigger('pre:create', event_data);
      return model.save((function(_this) {
        return function(err) {
          if (err) {
            return _this.sendError(res, err);
          }
          _this.clearCache();
          event_data.model = model;
          json = _this.whitelist.create ? _.pick(model.toJSON(), _this.whitelist.create) : model.toJSON();
          return _this.render(req, json, function(err, json) {
            if (err) {
              return _this.sendError(res, err);
            }
            _this.constructor.trigger('post:create', _.extend(event_data, {
              json: json
            }));
            return res.json(json);
          });
        };
      })(this));
    };

    RESTController.prototype.update = function(req, res) {
      var json;
      json = JSONUtils.parseDates(this.whitelist.update ? _.pick(req.body, this.whitelist.update) : req.body);
      return this.model_type.find(this.requestId(req), (function(_this) {
        return function(err, model) {
          var event_data;
          if (err) {
            return _this.sendError(res, err);
          }
          if (!model) {
            return _this.sendStatus(res, 404);
          }
          event_data = {
            req: req,
            res: res,
            model: model
          };
          _this.constructor.trigger('pre:update', event_data);
          return model.save(model.parse(json), function(err) {
            if (err) {
              return _this.sendError(res, err);
            }
            _this.clearCache();
            event_data.model = model;
            json = _this.whitelist.update ? _.pick(model.toJSON(), _this.whitelist.update) : model.toJSON();
            return _this.render(req, json, function(err, json) {
              if (err) {
                return _this.sendError(res, err);
              }
              _this.constructor.trigger('post:update', _.extend(event_data, {
                json: json
              }));
              return res.json(json);
            });
          });
        };
      })(this));
    };

    RESTController.prototype.destroy = function(req, res) {
      var event_data, id;
      event_data = {
        req: req,
        res: res
      };
      this.constructor.trigger('pre:destroy', event_data);
      return this.model_type.exists(id = this.requestId(req), (function(_this) {
        return function(err, exists) {
          if (err) {
            return _this.sendError(res, err);
          }
          if (!exists) {
            return _this.sendStatus(res, 404);
          }
          return _this.model_type.destroy(id, function(err) {
            if (err) {
              return _this.sendError(res, err);
            }
            _this.clearCache();
            _this.constructor.trigger('post:destroy', event_data);
            return res.json({});
          });
        };
      })(this));
    };

    RESTController.prototype.destroyByQuery = function(req, res) {
      var event_data;
      event_data = {
        req: req,
        res: res
      };
      this.constructor.trigger('pre:destroyByQuery', event_data);
      return this.model_type.destroy(JSONUtils.parseQuery(req.query), (function(_this) {
        return function(err) {
          if (err) {
            return _this.sendError(res, err);
          }
          _this.clearCache();
          _this.constructor.trigger('post:destroyByQuery', event_data);
          return res.json({});
        };
      })(this));
    };

    RESTController.prototype.head = function(req, res) {
      return this.model_type.exists(this.requestId(req), (function(_this) {
        return function(err, exists) {
          if (err) {
            return _this.sendError(res, err);
          }
          return _this.sendStatus(res, exists ? 200 : 404);
        };
      })(this));
    };

    RESTController.prototype.headByQuery = function(req, res) {
      return this.model_type.exists(JSONUtils.parseQuery(req.query), (function(_this) {
        return function(err, exists) {
          if (err) {
            return _this.sendError(res, err);
          }
          return _this.sendStatus(res, exists ? 200 : 404);
        };
      })(this));
    };

    RESTController.prototype.clearCache = function() {
      var cache, fn, hash_key, hash_keys, i, k, len, queue, ref1;
      if (!(cache = (ref1 = this.cache) != null ? ref1.cache : void 0)) {
        return;
      }
      if (!cache.store.hreset) {
        return;
      }
      queue = new Queue();
      hash_keys = [this.cache.hash].concat((function() {
        var i, len, ref2, results;
        ref2 = this.cache.cascade || [];
        results = [];
        for (i = 0, len = ref2.length; i < len; i++) {
          k = ref2[i];
          results.push(k);
        }
        return results;
      }).call(this));
      fn = function(hash_key) {
        return queue.defer(function(callback) {
          return cache.store.hreset(hash_key, callback);
        });
      };
      for (i = 0, len = hash_keys.length; i < len; i++) {
        hash_key = hash_keys[i];
        fn(hash_key);
      }
      return queue.await((function(_this) {
        return function(err) {
          if (err) {
            return console.log("[" + _this.model_type.name + " controller] Error clearing cache: ", err);
          }
        };
      })(this));
    };

    RESTController.prototype.fetchIndexJSON = function(req, callback) {
      return this.fetchJSON(req, this.whitelist.index, callback);
    };

    RESTController.prototype.fetchShowJSON = function(req, callback) {
      return this.fetchJSON(req, this.whitelist.show, callback);
    };

    RESTController.prototype.fetchJSON = function(req, whitelist, callback) {
      var cursor, query;
      query = this.parseSearchQuery(JSONUtils.parseQuery(req.query));
      cursor = this.model_type.cursor(query);
      if (whitelist) {
        cursor = cursor.whiteList(whitelist);
      }
      return cursor.toJSON((function(_this) {
        return function(err, json) {
          if (err) {
            return _this.sendError(res, err);
          }
          if (cursor.hasCursorQuery('$count') || cursor.hasCursorQuery('$exists')) {
            return callback(null, {
              json: {
                result: json
              }
            });
          }
          if (!json) {
            if (cursor.hasCursorQuery('$one')) {
              return callback(null, {
                status: 404
              });
            } else {
              return callback(null, {
                json: json
              });
            }
          }
          if (cursor.hasCursorQuery('$page')) {
            return _this.render(req, json.rows, function(err, rendered_json) {
              if (err) {
                return _this.sendError(res, err);
              }
              json.rows = rendered_json;
              return callback(null, {
                json: json
              });
            });
          } else if (cursor.hasCursorQuery('$values')) {
            return callback(null, {
              json: json
            });
          } else {
            return _this.render(req, json, function(err, rendered_json) {
              return callback(err, {
                json: rendered_json
              });
            });
          }
        };
      })(this));
    };

    RESTController.prototype.render = function(req, json, callback) {
      var models, options, template, template_name;
      template_name = req.query.$render || req.query.$template || this.default_template;
      if (!template_name) {
        return callback(null, json);
      }
      try {
        template_name = JSON.parse(template_name);
      } catch (error) {}
      if (!(template = this.templates[template_name])) {
        return callback(new Error("Unrecognized template: " + template_name));
      }
      options = (this.renderOptions ? this.renderOptions(req, template_name) : {});
      if (template.$raw) {
        return template(json, options, (function(_this) {
          return function(err, rendered_json) {
            if (err) {
              return callback(err);
            }
            return callback(null, _this.stripRev(rendered_json));
          };
        })(this));
      }
      models = _.isArray(json) ? _.map(json, (function(_this) {
        return function(model_json) {
          return new _this.model_type(_this.model_type.prototype.parse(model_json));
        };
      })(this)) : new this.model_type(this.model_type.prototype.parse(json));
      return JSONUtils.renderTemplate(models, template, options, callback);
    };

    RESTController.prototype.parseSearchQuery = function(query) {
      var item, key, new_query, value;
      new_query = {};
      if (!(_.isObject(query) && !(query instanceof Date))) {
        return query;
      }
      for (key in query) {
        value = query[key];
        if (key === '$search') {
          if (this.db === 'mongodb') {
            new_query.$regex = value;
            new_query.$options = 'i';
          } else {
            new_query.$like = value;
          }
        } else if (_.isArray(value)) {
          new_query[key] = (function() {
            var i, len, results;
            results = [];
            for (i = 0, len = value.length; i < len; i++) {
              item = value[i];
              results.push(this.parseSearchQuery(item));
            }
            return results;
          }).call(this);
        } else if (_.isObject(value)) {
          new_query[key] = this.parseSearchQuery(value);
        } else {
          new_query[key] = value;
        }
      }
      return new_query;
    };

    RESTController.prototype.stripRev = function(obj) {
      var final_obj, key, o, value;
      if (_.isArray(obj)) {
        return (function() {
          var i, len, results;
          results = [];
          for (i = 0, len = obj.length; i < len; i++) {
            o = obj[i];
            results.push(this.stripRev(o));
          }
          return results;
        }).call(this);
      }
      if (!(_.isObject(obj) && !obj instanceof Date)) {
        return obj;
      }
      final_obj = {};
      for (key in obj) {
        value = obj[key];
        if (key !== '_rev') {
          final_obj[key] = this.stripRev(value);
        }
      }
      return final_obj;
    };

    return RESTController;

  })(require('./lib/json_controller'));

}).call(this);
