// Generated by CoffeeScript 1.7.1

/*
  backbone-rest.js 0.5.3
  Copyright (c) 2013 Vidigami - https://github.com/vidigami/backbone-rest
  License: MIT (http://www.opensource.org/licenses/mit-license.php)
 */

(function() {
  var Backbone, JSONUtils, JoinTableControllerSingleton, RESTController, Utils, path, _, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  path = require('path');

  _ref = require('backbone-orm'), _ = _ref._, Backbone = _ref.Backbone, Utils = _ref.Utils, JSONUtils = _ref.JSONUtils;

  JoinTableControllerSingleton = require('./lib/join_table_controller_singleton');

  module.exports = RESTController = (function() {
    function RESTController(app, options) {
      var del;
      if (options == null) {
        options = {};
      }
      this._call = __bind(this._call, this);
      this.headByQuery = __bind(this.headByQuery, this);
      this.head = __bind(this.head, this);
      this.destroyByQuery = __bind(this.destroyByQuery, this);
      this.destroy = __bind(this.destroy, this);
      this.update = __bind(this.update, this);
      this.create = __bind(this.create, this);
      this.show = __bind(this.show, this);
      this.index = __bind(this.index, this);
      _.extend(this, options);
      this.white_lists || (this.white_lists = {});
      this.templates || (this.templates = {});
      this.logger || (this.logger = console);
      if (this.route_prefix) {
        this.route = path.join(this.route_prefix, this.route);
      }
      app.get("" + this.route + "/:id", this._call(this.show));
      app.get(this.route, this._call(this.index));
      app.post(this.route, this._call(this.create));
      app.put("" + this.route + "/:id", this._call(this.update));
      del = app.hasOwnProperty('delete') ? 'delete' : 'del';
      app[del]("" + this.route + "/:id", this._call(this.destroy));
      app[del](this.route, this._call(this.destroyByQuery));
      app.head("" + this.route + "/:id", this._call(this.head));
      app.head(this.route, this._call(this.headByQuery));
      JoinTableControllerSingleton.generateByOptions(app, options);
    }

    RESTController.prototype.requestId = function(req) {
      return JSONUtils.parse({
        id: req.params.id
      }, this.model_type).id;
    };

    RESTController.prototype.requestValue = function(req, key) {
      if (_.isFunction(req[key])) {
        return req[key]();
      } else {
        return req[key];
      }
    };

    RESTController.prototype.sendStatus = function(res, status) {
      res.status(status);
      return res.json({});
    };

    RESTController.prototype.sendError = function(res, err) {
      var req;
      req = res.req;
      this.constructor.trigger('error', {
        req: req,
        res: res,
        err: err
      });
      this.logger.error("Error 500 from " + req.method + " " + req.url + ": " + ((err != null ? err.stack : void 0) || err));
      res.header('content-type', 'text/plain');
      res.status(500);
      return this.sendStatus(res, err.toString());
    };

    RESTController.prototype.index = function(req, res) {
      var cursor, event_data;
      if (req.method === 'HEAD') {
        return this.headByQuery.apply(this, arguments);
      }
      event_data = {
        req: req,
        res: res
      };
      this.constructor.trigger('pre:index', event_data);
      cursor = this.model_type.cursor(JSONUtils.parse(req.query, this.model_type));
      if (this.white_lists.index) {
        cursor = cursor.whiteList(this.white_lists.index);
      }
      return cursor.toJSON((function(_this) {
        return function(err, json) {
          if (err) {
            return _this.sendError(res, err);
          }
          _this.constructor.trigger('post:index', _.extend(event_data, {
            json: json
          }));
          if (cursor.hasCursorQuery('$count') || cursor.hasCursorQuery('$exists')) {
            return res.json({
              result: json
            });
          }
          if (!json) {
            if (cursor.hasCursorQuery('$one')) {
              return _this.sendStatus(res, 404);
            } else {
              return res.json(json);
            }
          }
          if (cursor.hasCursorQuery('$page')) {
            return _this.render(req, json.rows, function(err, rendered_json) {
              if (err) {
                return _this.sendError(res, err);
              }
              json.rows = rendered_json;
              return res.json(json);
            });
          } else if (cursor.hasCursorQuery('$values')) {
            return res.json(json);
          } else {
            return _this.render(req, json, function(err, rendered_json) {
              if (err) {
                return _this.sendError(res, err);
              }
              return res.json(rendered_json);
            });
          }
        };
      })(this));
    };

    RESTController.prototype.show = function(req, res) {
      var cursor, event_data;
      event_data = {
        req: req,
        res: res
      };
      this.constructor.trigger('pre:show', event_data);
      cursor = this.model_type.cursor(this.requestId(req));
      if (this.white_lists.show) {
        cursor = cursor.whiteList(this.white_lists.show);
      }
      return cursor.toJSON((function(_this) {
        return function(err, json) {
          if (err) {
            return _this.sendError(res, err);
          }
          if (!json) {
            return _this.sendStatus(res, 404);
          }
          if (_this.white_lists.show) {
            json = _.pick(json, _this.white_lists.show);
          }
          _this.constructor.trigger('post:show', _.extend(event_data, {
            json: json
          }));
          return _this.render(req, json, function(err, json) {
            if (err) {
              return _this.sendError(res, err);
            }
            return res.json(json);
          });
        };
      })(this));
    };

    RESTController.prototype.create = function(req, res) {
      var event_data, json, model;
      json = JSONUtils.parse(this.white_lists.create ? _.pick(req.body, this.white_lists.create) : req.body);
      model = new this.model_type(this.model_type.prototype.parse(json));
      event_data = {
        req: req,
        res: res,
        model: model
      };
      this.constructor.trigger('pre:create', event_data);
      return model.save((function(_this) {
        return function(err) {
          if (err) {
            return _this.sendError(res, err);
          }
          event_data.model = model;
          json = _this.white_lists.create ? _.pick(model.toJSON(), _this.white_lists.create) : model.toJSON();
          return _this.render(req, json, function(err, json) {
            if (err) {
              return _this.sendError(res, err);
            }
            _this.constructor.trigger('post:create', _.extend(event_data, {
              json: json
            }));
            return res.json(json);
          });
        };
      })(this));
    };

    RESTController.prototype.update = function(req, res) {
      var json;
      json = JSONUtils.parse(this.white_lists.update ? _.pick(req.body, this.white_lists.update) : req.body);
      return this.model_type.find(this.requestId(req), (function(_this) {
        return function(err, model) {
          var event_data;
          if (err) {
            return _this.sendError(res, err);
          }
          if (!model) {
            return _this.sendStatus(res, 404);
          }
          event_data = {
            req: req,
            res: res,
            model: model
          };
          _this.constructor.trigger('pre:update', event_data);
          return model.save(model.parse(json), function(err) {
            if (err) {
              return _this.sendError(res, err);
            }
            event_data.model = model;
            json = _this.white_lists.update ? _.pick(model.toJSON(), _this.white_lists.update) : model.toJSON();
            return _this.render(req, json, function(err, json) {
              if (err) {
                return _this.sendError(res, err);
              }
              _this.constructor.trigger('post:update', _.extend(event_data, {
                json: json
              }));
              return res.json(json);
            });
          });
        };
      })(this));
    };

    RESTController.prototype.destroy = function(req, res) {
      var event_data;
      event_data = {
        req: req,
        res: res
      };
      this.constructor.trigger('pre:destroy', event_data);
      return this.model_type.exists(this.requestId(req), (function(_this) {
        return function(err, exists) {
          if (err) {
            return _this.sendError(res, err);
          }
          if (!exists) {
            return _this.sendStatus(res, 404);
          }
          return _this.model_type.destroy({
            id: _this.requestId(req)
          }, function(err) {
            if (err) {
              return _this.sendError(res, err);
            }
            _this.constructor.trigger('post:destroy', event_data);
            return _this.sendStatus(res, 200);
          });
        };
      })(this));
    };

    RESTController.prototype.destroyByQuery = function(req, res) {
      var event_data;
      event_data = {
        req: req,
        res: res
      };
      this.constructor.trigger('pre:destroyByQuery', event_data);
      return this.model_type.destroy(JSONUtils.parse(req.query, this.model_type), (function(_this) {
        return function(err) {
          if (err) {
            return _this.sendError(res, err);
          }
          _this.constructor.trigger('post:destroyByQuery', event_data);
          return _this.sendStatus(res, 200);
        };
      })(this));
    };

    RESTController.prototype.head = function(req, res) {
      return this.model_type.exists(this.requestId(req), (function(_this) {
        return function(err, exists) {
          if (err) {
            return _this.sendError(res, err);
          }
          return _this.sendStatus(res, exists ? 200 : 404);
        };
      })(this));
    };

    RESTController.prototype.headByQuery = function(req, res) {
      return this.model_type.exists(JSONUtils.parse(req.query, this.model_type), (function(_this) {
        return function(err, exists) {
          if (err) {
            return _this.sendError(res, err);
          }
          return _this.sendStatus(res, exists ? 200 : 404);
        };
      })(this));
    };

    RESTController.prototype.render = function(req, json, callback) {
      var models, options, template, template_name;
      template_name = req.query.$render || req.query.$template || this.default_template;
      if (!template_name) {
        return callback(null, json);
      }
      if (!(template = this.templates[template_name])) {
        return callback(new Error("Unrecognized template: " + template_name));
      }
      options = (this.renderOptions ? this.renderOptions(req, template_name) : {});
      models = _.isArray(json) ? _.map(json, (function(_this) {
        return function(model_json) {
          return new _this.model_type(_this.model_type.prototype.parse(model_json));
        };
      })(this)) : new this.model_type(this.model_type.prototype.parse(json));
      return JSONUtils.renderTemplate(models, template, options, callback);
    };

    RESTController.prototype.setHeaders = function(req, res, next) {
      res.header('cache-control', 'no-cache');
      return next();
    };

    RESTController.prototype._reqToCRUD = function(req) {
      var req_path;
      req_path = this.requestValue(req, 'path');
      if (req_path === this.route) {
        switch (req.method) {
          case 'GET':
            return 'index';
          case 'POST':
            return 'create';
          case 'DELETE':
            return 'destroyByQuery';
          case 'HEAD':
            return 'headByQuery';
        }
      } else if (this.requestId(req) && req_path === ("" + this.route + "/" + (this.requestId(req)))) {
        switch (req.method) {
          case 'GET':
            return 'show';
          case 'PUT':
            return 'update';
          case 'DELETE':
            return 'destroy';
          case 'HEAD':
            return 'head';
        }
      }
    };

    RESTController.prototype._call = function(fn) {
      var auths;
      auths = _.isArray(this.auth) ? this.auth.slice() : this.auth ? [this.auth] : [];
      auths.push(this.setHeaders);
      auths.push((function(_this) {
        return function(req, res, next) {
          var err, _ref1;
          if (_this.blocked) {
            if (_ref1 = _this._reqToCRUD(req), __indexOf.call(_this.blocked, _ref1) >= 0) {
              return _this.sendStatus(res, 405);
            }
          }
          try {
            return fn(req, res, next);
          } catch (_error) {
            err = _error;
            return _this.sendError(res, err);
          }
        };
      })(this));
      return auths;
    };

    return RESTController;

  })();

  _.extend(RESTController, Backbone.Events);

}).call(this);
